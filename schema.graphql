### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

type Category {
  id: Int!
  slug: String!
  title: String!
}

input CategoryCreateManyWithoutPostsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPostsInput!]
}

input CategoryCreateWithoutPostsInput {
  slug: String!
  title: String!
}

input CategoryWhereUniqueInput {
  id: Int
}

scalar DateTime

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  deletePost(id: Int!): Post
  login(email: String!, password: String!): AuthPayload!
  register(email: String!, firstName: String!, lastName: String!, password: String!): AuthPayload!
}

type Post {
  author: User!
  createdAt: DateTime!
  id: Int!
  public: Boolean!
  text: String
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput!
  categories: CategoryCreateManyWithoutPostsInput
  createdAt: DateTime
  public: Boolean
  text: String
  title: String!
  updatedAt: DateTime
}

type Query {
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, skip: Int): [Category!]!
  myPosts(authorId: Int!): [Post!]!
  profile: User
  publicPosts: [Post!]!
}

type User {
  avatar: String
  canPostToday: Boolean!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  updatedAt: DateTime!
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  avatar: String
  createdAt: DateTime
  email: String!
  firstName: String!
  lastName: String!
  password: String
  updatedAt: DateTime
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
